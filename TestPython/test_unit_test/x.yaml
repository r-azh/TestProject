openapi: "3.0.0"
info:
  description: This is a simple API for Pandora Project
  version: 1.0.0
  title: Simple Pandora API
servers:
  - url: 'http://localhost/api/v1'
    description: Local server
  - url: 'http://173.249.11.210/api/v1'
    description: Staging server
  - url: 'http://173.249.59.242/api/v1'
    description: Development server
tags:
  - name: customers
    description: Secured Admin-only calls
  - name: operators
    description: Operations available to operators
  - name: guests
    description: Operations available to guests
  - name: clients
    description: Operations available to clients
paths:
  /self:
    get:
      security:
        - PasswordOAuth2:
            - self
        - ServerOAuth2:
            - clients_read
      tags:
        - customers
        - operators
        - clients
      summary: Return current user information
      operationId: retrieve_self
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Return current user information
      responses:
        '200':
          description: Information of the current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Self'
  /self/storage:
    get:
      security:
        - PasswordOAuth2:
            - self
      tags:
        - customers
        - operators
      summary: Return current user storage
      operationId: retrieve_self_storage
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Return current user storage
      responses:
        '200':
          description: List of items in the storage for the current user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Storage'
    put:
      security:
        - PasswordOAuth2:
            - self
      tags:
        - customers
        - operators
      summary: Update the storage for the current user
      operationId: replace_self_storage
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Some description
      requestBody:
        description: Update the storage for the current user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Storage'
      responses:
        '200':
          description: Storage has been update successfuly
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequest'
    patch:
      security:
        - PasswordOAuth2:
            - self
      tags:
        - customers
        - operators
      summary: Edit one or more fields of storage
      operationId: update_self_storage
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Some description
      requestBody:
        description: Update custom param for current user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          description: All params has been update successfuly
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Storage'
        '400':
          $ref: '#/components/responses/BadRequest'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  /media:
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return a list of all media
      operationId: list_media
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      description: |
        Some description
      responses:
        '200':
          description: A list of media.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Medium'
  '/media/{medium_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return information about a specific medium.
      operationId: retrieve_medium
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MediumID'
      description: |
        Some description for information about a specific medium.
      responses:
        '200':
          description: Information of the medium.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Medium'
        '404':
          $ref: '#/components/responses/MediumNotFound'
  '/media/{medium_id}/platforms':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return a list of all platforms related to specific media
      operationId: list_medium_platforms
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/MediumID'
      description: |
        Some description
      responses:
        '200':
          description: A list of platforms.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Platform'
        '404':
          $ref: '#/components/responses/MediumNotFound'
  '/media/{medium_id}/platforms/{platform_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return information about a specific platform in a specific medium.
      operationId: retrieve_medium_platform
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MediumID'
        - $ref: '#/components/parameters/PlatformID'
      description: |
        Some description for information about a specific platform.
      responses:
        '200':
          description: Information of the platform.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Platform'
        '404':
          $ref: '#/components/responses/MediumOrPlatformNotFound'
  /accessibilities:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all accessibilities
      operationId: list_accessibilities
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Some description
      responses:
        '200':
          description: A list of accessibilities.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Accessibility'
  /domains:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all domains
      operationId: list_domains
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
      description: |
        Some description
      responses:
        '200':
          description: A list of domains.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Domain'
    post:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Create a new domains
      operationId: create_domain
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
      description: |
        Some description
      requestBody:
        description: domain name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
      responses:
        '201':
          description: Successfuly create domain
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Domain'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetDomainByID:
              operationId: retrieve_domain
              parameters:
                domain_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `domain_id` parameter in `GET /domains/{domain_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
  '/domains/{domain_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific domain.
      operationId: retrieve_domain
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description for information about a specific domain.
      responses:
        '200':
          description: Information of the domain.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Domain'
        '404':
          $ref: '#/components/responses/DomainNotFound'
    put:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Replace domain info
      operationId: replace_domain
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: domain name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Domain'
      responses:
        '200':
          $ref: '#/components/responses/DomainHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Edit one or more fields of inbox
      operationId: update_domain
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        *name (set)
      requestBody:
        description: domain name
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/DomainHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/verifications':
    post:
      security:
        - PasswordOAuth2:
            - client_write
            - customer_panel_write
      tags:
        - customers
        - clients
      summary: Create a new verification for current domain
      operationId: create_domain_verification
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: handle info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserHandle'
      responses:
        '201':
          description: Successfuly create verification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HandleVerification'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetOperatorByID:
              operationId: retrieve_domain_verification
              parameters:
                domain_id: '$response.path#/domain_id'
                verification_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `verification_id` parameter in `GET
                /domains/{domain_id}/verification/{verification_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/verifications/{verification_id}':
    get:
      security:
        - PasswordOAuth2:
            - clients_read
            - customer_panel_read
      tags:
        - clients
        - customers
      summary: Retrieve a verification
      operationId: retrieve_domain_verification
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/VerificationID'
      description: >
        Some description for information about a specific verification
      responses:
        '200':
          description: Information of the requested invitation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/HandleVerification'
        '404':
          $ref: '#/components/responses/DomainOrVerificationNotFound'
  '/domains/domain_id/anonymous-users':
    post:
      security:
        - PasswordOAuth2:
            - clients_write
      tags:
        - clients
      summary: Create an anonymous user
      operationId: create_domain_anonymous_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: verification info with handle
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HandleVerificationWithHandleInfo'
      responses:
        '201':
          description: Successfuly create verification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AnonymousUserWithUserInfo'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetOperatorByID:
              operationId: retrieve_domain_verification
              parameters:
                domain_id: '$response.path#/domain_id'
                anonymous_user_id: '$response.body#/data/id'
              description: >
                The `token` value returned in the response can be used as the
                `anonymous_user_id` parameter in `GET
                /domains/{domain_id}/anonymous-users/{anonymous_user_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/anonymous-users/{anonymous_user_id}':
    get:
      security:
        - PasswordOAuth2:
            - clients_read
      tags:
        - clients
      summary: Retrieve a anonymous user
      operationId: retrieve_domain_anonymous_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/AnonymousUserID'
      description: >
        Some description for information about a specific anonymous user
      responses:
        '200':
          description: Information of the active anonymous user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AnonymousUserWithUserInfo'
        '404':
          $ref: '#/components/responses/DomainOrAnonymousUserNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - clients_write
      tags:
        - clients
      summary: Convert anonymous_user to user
      operationId: update_domain_anonymous_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/AnonymousUserID'
      description: |
        some descriptions
      requestBody:
        description: |
          Convert anonymous_user to user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePatchRequest'
      responses:
        '200':
          description: Information of the active anonymous user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AnonymousUserWithUserInfo'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainOrAnonymousUserNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/roles':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return a list of all roles in a specific domain
      operationId: list_domain_roles
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      responses:
        '200':
          description: A list of roles.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/RoleWithAccessibility'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/roles/{role_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
            - operator_panel_read
      tags:
        - customers
        - operators
      summary: Return information about a specific role in the current domain.
      operationId: retrieve_domain_role
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/RoleID'
      description: |
        Some description for information about a specific role.
      responses:
        '200':
          description: Information of the client.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RoleWithAccessibility'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrRoleNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Edit accessibilities of the specific role
      operationId: update_domain_role
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/RoleID'
      description: |
        some descriptions
      requestBody:
        description: |
          Change role accessibilities
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RolePatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/RoleHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainOrRoleNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/clients':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all clients in a specific domain
      operationId: list_domain_clients
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      responses:
        '200':
          description: A list of clients.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Client'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/clients/{client_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific client in the current domain.
      operationId: retrieve_domain_client
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/ClientID'
      description: |
        Some description for information about a specific client.
      responses:
        '200':
          description: Information of the client.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Client'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrClientNotFound'
  '/domains/{domain_id}/clients/{client_id}/users/{user_id}/links/oauth':
    get:
      security:
        - ServerOAuth2:
            - links_oauth
      tags:
        - clients
      summary: >-
        Return a link to allow client login a specific user without username and
        password
      operationId: retrieve_domain_client_user_link_oauth
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/ClientID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description for retrieve domain client user link
      responses:
        '200':
          description: Temporary OAuth link for a specific user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Link'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrClientOrUserNotFound'
  '/domains/{domain_id}/clients/{client_id}/operators/{operator_id}/links/oauth':
    get:
      security:
        - ServerOAuth2:
            - links_oauth
      tags:
        - clients
      summary: >-
        Return a link to allow client login a specific operator without username
        and password
      operationId: retrieve_domain_client_operator_link_oauth
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/ClientID'
        - $ref: '#/components/parameters/OperatorID'
      description: |
        Some description for retrieve domain client user link
      responses:
        '200':
          description: Temporary OAuth link for a specific operator.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Link'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrClientOrOperatorNotFound'
  /plans:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all plans
      operationId: list_plans
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Status'
      description: |
        Some description
      responses:
        '200':
          description: A list of plans.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/PlanWithDomain'
  '/plans/{plan_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific plan.
      operationId: retrieve_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/PlanID'
      description: |
        Some description for information about a specific plan.
      responses:
        '200':
          description: Information of the plan.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/PlanWithDomain'
        '404':
          $ref: '#/components/responses/PlanNotFound'
  '/domains/{domain_id}/plans':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all plans in a specific domains
      operationId: list_domain_plans
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Status'
      description: |
        Some description
      responses:
        '200':
          description: A list of plans.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Plan'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
    post:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Create a new plan for current domain
      operationId: create_domain_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: plan info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '201':
          description: Successfuly create plan
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Plan'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetOperatorByID:
              operationId: retrieve_domain_operator
              parameters:
                domain_id: '$response.path#/domain_id'
                plan_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `plan_id` parameter in `GET
                /domains/{domain_id}/plans/{plan_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/plans/{plan_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific plan in the current domain.
      operationId: retrieve_domain_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/PlanID'
      description: >
        Some description for information about a specific plan in the current
        domain.
      responses:
        '200':
          description: Information of the plan.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Plan'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrPlanNotFound'
    put:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Replace plan info in the current domain
      operationId: replace_domain_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/PlanID'
      description: |
        Some description
      requestBody:
        description: plan info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plan'
      responses:
        '200':
          $ref: '#/components/responses/PlanHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrPlanNotFound'
  /operators:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all operators
      operationId: list_operators
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Email'
        - $ref: '#/components/parameters/Status'
      description: |
        Some description
      responses:
        '200':
          description: A list of operators.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/OperatorWithDomain'
  '/operators/{operator_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific operator.
      operationId: retrieve_operator
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/OperatorID'
      description: |
        Some description for information about a specific operator.
      responses:
        '200':
          description: Information of the operator.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/OperatorWithDomain'
        '404':
          $ref: '#/components/responses/OperatorNotFound'
  '/domains/{domain_id}/operators':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all operators in a specific domains
      operationId: list_domain_operators
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Email'
        - $ref: '#/components/parameters/Status'
      description: |
        Some description
      responses:
        '200':
          description: A list of operators.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Operator'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
    post:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Create a new operator for current domain
      operationId: create_domain_operator
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: operator info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operator'
      responses:
        '201':
          description: Successfuly create operator
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Operator'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetOperatorByID:
              operationId: retrieve_domain_operator
              parameters:
                domain_id: '$response.path#/domain_id'
                operator_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `domain_id` parameter in `GET
                /domains/{domain_id}/operators/{operator_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/operators/{operator_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific operator in the current domain.
      operationId: retrieve_domain_operator
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/OperatorID'
      description: >
        Some description for information about a specific operator in the
        current domain.
      responses:
        '200':
          description: Information of the operator.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Operator'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrOperatorNotFound'
    put:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Replace operator info in the current domain
      operationId: replace_domain_operator
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/OperatorID'
      description: |
        Some description
      requestBody:
        description: operator info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Operator'
      responses:
        '200':
          $ref: '#/components/responses/OperatorHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrOperatorNotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    patch:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Edit one or more fields of operator
      operationId: update_domain_operator
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/OperatorID'
      description: |
        some descriptions
      requestBody:
        description: |
          *name (set)
          *email (set)
          *status (set)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/OperatorHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainOrOperatorNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
  /teams:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all teams
      operationId: list_teams
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
      description: |
        Some description
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/TeamWithDomain'
  '/teams/{team_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific team.
      operationId: retrieve_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description for information about a specific team.
      responses:
        '200':
          description: Information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TeamWithDomain'
        '404':
          $ref: '#/components/responses/TeamNotFound'
  '/domains/{domain_id}/teams':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all teams in a specific domains
      operationId: list_domain_teams
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/Name'
      description: |
        Some description
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/TeamWithOwner'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
  '/domains/{domain_id}/teams/{team_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific team in the current domain.
      operationId: retrieve_domain_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/TeamID'
      description: >
        Some description for information about a specific team in the current
        domain.
      responses:
        '200':
          description: Information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TeamWithOwner'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrTeamNotFound'
  /domains/{domain_id}/teams/{team_id}/invitations/by-token:
    get:
      security:
        - PasswordOAuth2:
            - clients_read
      tags:
        - clients
      summary: Retrieve a team invitation by token
      operationId: retrieve_domain_team_invitaion_by_token
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberInvitationToken'
      description: >
        Some description for information about a specific invitation
        retrieved by token.
      responses:
        '200':
          description: Information of the requested invitation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MemberInvitationWIthUserMeta'
        '404':
          $ref: '#/components/responses/DomainOrTeamOrInvitationNotFound'
  /domains/{domain_id}/teams/{team_id}/confirm-invitation:
    put:
      security:
        - PasswordOAuth2:
            - clients_write
      tags:
        - clients
      summary: Confirm team invitation
      operationId: call_domain_team_confirm_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          ID is required
          Token is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmOrRejectInvitation'
      responses:
        '200':
          description: Information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserTeam'
        '404':
          $ref: '#/components/responses/DomainOrTeamNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  /domains/{domain_id}/teams/{team_id}/reject-invitation:
    put:
      security:
        - PasswordOAuth2:
            - clients_write
      tags:
        - clients
      summary: Reject team invitation
      operationId: call_domain_team_reject_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          ID is required
          Token is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConfirmOrRejectInvitation'
      responses:
        '200':
          description: Public information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TeamPublicInfo'
        '404':
          $ref: '#/components/responses/DomainOrTeamNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  /users:
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all users
      operationId: list_users
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Email'
        - $ref: '#/components/parameters/Mobile'
      description: |
        Some description
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/UserWithDomain'
  '/users/{user_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific user.
      operationId: retrieve_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description for information about a specific user.
      responses:
        '200':
          description: Information of the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserWithDomain'
        '404':
          $ref: '#/components/responses/UserNotFound'
  '/domains/{domain_id}/users':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return a list of all users in a specific domains
      operationId: list_domain_users
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Email'
        - $ref: '#/components/parameters/Mobile'
      description: |
        Some description
      responses:
        '200':
          description: A list of users.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainNotFound'
    post:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Create a new user for current domain
      operationId: create_domain_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: |
          User info
          * Name is required
          * Email is required and unique
          * Status is required
          * Password is required
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
      responses:
        '201':
          description: Successfuly create user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetUserByID:
              operationId: retrieve_domain_user
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `domain_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/users/{user_id}':
    get:
      security:
        - PasswordOAuth2:
            - operator_panel_read
      tags:
        - operators
      summary: Return information about a specific user in the current domain.
      operationId: retrieve_domain_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: >
        Some description for information about a specific operator in the
        current domain.
      responses:
        '200':
          description: Information of the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserNotFound'
    put:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Replace user info in the current domain
      operationId: replace_domain_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description
      requestBody:
        description: |
          user info
          * Name is required
          * Email is required and unique
          * Status is required
          * Password is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          $ref: '#/components/responses/UserHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserNotFound'
        '409':
          $ref: '#/components/responses/Conflict'
    patch:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Edit one or more fields of user
      operationId: update_domain_user
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        some descriptions
      requestBody:
        description: |
          *name (set)
          *email (set)
          *status (set)
          *mobile (set)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/UserHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainOrUserNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/users/public-info/by-handle':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Retrieve a user by email or mobile as handler
      operationId: retrieve_domain_user_public_info_by_handle
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserHandle'
      description: >
        Some description for information about a specific user retrieved by
        handle.
      responses:
        '200':
          description: Public information of the user.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserPublicInfo'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserNotFound'
  '/domains/{domain_id}/user-with-team':
    post:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Create a new user and assign default team in the current domain
      operationId: create_domain_user_with_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
      description: |
        Some description
      requestBody:
        description: |
          User info
          * name is required
          * email is required and unique
          * status is required
          * password is required
          * team.name required
        required: true
        content:
          application/json:
            schema:
              allOf:
                - $ref: '#/components/schemas/User'
                - type: object
                  properties:
                    team:
                      $ref: '#/components/schemas/Team'
      responses:
        '201':
          description: Successfuly create user
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/User'
                          - type: object
                            properties:
                              team:
                                $ref: '#/components/schemas/Team'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetUserByID:
              operationId: retrieve_domain_user
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `domain_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/users/{user_id}/notifications/devices':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: >-
        A list of all devices registered for sending notifications to a specific
        user
      operationId: list_domain_user_notification_devices
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description
      responses:
        '200':
          description: A list of devices.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Device'
        '403':
          $ref: '#/components/responses/AccessForbidden'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Register a new device for current user
      operationId: create_domain_user_notification_device
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description
      requestBody:
        description: |
          Device info
            * Push_token is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Device'
      responses:
        '201':
          description: Device successfully registered
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Device'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetTeamByID:
              operationId: retrieve_domain_user_notification_device
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                device_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `device_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/devices/{device_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/notifications/devices/test':
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Send a test notification to all registered devices for the given user
      operationId: create_domain_user_notification_device_test
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Sends a test notification to all registered devices for the given user
      requestBody:
        description: |
          Test notification message
            * message is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationTestMessage'
      responses:
        '201':
          description: A test notification is sent.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
        '404':
          $ref: '#/components/responses/DomainOrUserNotFound'
  '/domains/{domain_id}/users/{user_id}/notifications/devices/{device_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific device.
      operationId: retrieve_domain_user_notification_device
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/DeviceID'
      description: |
        Some description for information about a specific device.
      responses:
        '200':
          description: Information of the device.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Device'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrDeviceNotFound'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Unregister a specific device
      operationId: hard_delete_domain_user_notification_device
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/DeviceID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all teams logined user is member of them
      operationId: list_domain_user_teams
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/UserTeam'
        '403':
          $ref: '#/components/responses/AccessForbidden'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new team for current domain
      operationId: create_domain_user_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
      description: |
        Some description
      requestBody:
        description: |
          Team info with owner id
            * Name is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamWithOwner'
      responses:
        '201':
          description: Successfuly create team
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserTeam'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetTeamByID:
              operationId: retrieve_domain_user_team
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `domain_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific team.
      operationId: retrieve_domain_user_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description for information about a specific team.
      responses:
        '200':
          description: Information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserTeam'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Replace team info in the current domain
      operationId: replace_domain_user_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          Team information
          * Name is required
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/TeamWithOwner'
      responses:
        '200':
          $ref: '#/components/responses/UserTeamHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Edit one or more fields of team in a specific user in the domain
      operationId: update_domain_user_team
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        some descriptions
      requestBody:
        description: |
          *name (set)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/UserTeamHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/confirm-invitation':
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Confirm team invitation
      operationId: call_domain_user_team_confirm_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          EmptyBody
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmptyBody'
      responses:
        '200':
          description: Information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/UserTeam'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/reject-invitation':
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Reject team invitation
      operationId: call_domain_user_team_reject_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          EmptyBody
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EmptyBody'
      responses:
        '200':
          description: Public information of the team.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/TeamPublicInfo'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/members':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all member of teams
      operationId: list_domain_user_team_members
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/Email'
        - $ref: '#/components/parameters/Role'
      description: |
        Some description
      responses:
        '200':
          description: A list of team members.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Member'
        '403':
          $ref: '#/components/responses/AccessForbidden'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new member
      operationId: create_domain_user_team_member
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: member id and role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          description: Successfuly create member
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_member
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                member_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `inbox_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific member.
      operationId: retrieve_domain_user_team_member
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the member.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Member'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrMemberNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Edit one or more fields of member
      operationId: update_domain_user_team_member
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
      description: |
        * role (set)
        * status (set)
        * inboxes (set, add ,remove)
      requestBody:
        description: Member info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/MemberHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrMemberNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: delete specific member from team
      operationId: hard_delete_domain_user_team_member
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}/invitations':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all invitations for specific member
      operationId: list_domain_user_team_member_invitations
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
      description: |
        Some description
      responses:
        '200':
          description: A list of invitations.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/MemberInvitation'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrMemberNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new invitation
      operationId: create_domain_user_team_member_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
      description: |
        Some description
      requestBody:
        description: empty body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberInvitation'
      responses:
        '201':
          description: Successfuly create invitation
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MemberInvitation'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_member_invitation
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                member_id: '$response.path#/team_id'
                invitation_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `invitation_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}/invitations/{invitation_id}`.
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrMemberNotFound'
        '423':
          $ref: '#/components/responses/Locked'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}/invitations/{invitation_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific invitation.
      operationId: retrieve_domain_user_team_member_invitation
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/MemberID'
        - $ref: '#/components/parameters/InvitationID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the invitation.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MemberInvitation'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: >-
            #/components/responses/DomainOrUserOrTeamOrMemberOrInvitationNotFound
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/member-by-handle':
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new member by handle
      operationId: create_domain_user_team_member_by_handle
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: handle and role
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MemberByHandler'
      responses:
        '201':
          description: Successfuly create member
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Member'
                          - type: object
                            properties:
                              meta:
                                type: object
                                properties:
                                  invitation:
                                    $ref: '#/components/schemas/MemberInvitation'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_member
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                member_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `inbox_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/members/{member_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
        '409':
          $ref: '#/components/responses/Conflict'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/current_plan':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about current plan of a specific team.
      operationId: retrieve_domain_user_team_current_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description for information about current plan of a specific team.
      responses:
        '200':
          description: Information of the current plan.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CurrentPlan'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
    put:
      security:
        - PasswordOAuth2:
            - operator_panel_write
      tags:
        - operators
      summary: Replace current plan
      operationId: replace_domain_user_team_current_plan
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: |
          plan information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AssigningPlan'
      responses:
        '200':
          $ref: '#/components/responses/TeamPlanHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/recipients':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all recipients in a specific team
      operationId: list_domain_user_team_recipients
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      responses:
        '200':
          description: A list of recipeints.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/RecipientWithFilterAndVerificationInfo'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new recipeint
      operationId: create_domain_user_team_recipient
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: recipeint info
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyOfRecipients'
      responses:
        '201':
          description: Successfuly create recipient
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AnyOfRecipients'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_inbox
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                recipient_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `recipient_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/recipeints/{recipient_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Conflict'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/recipients/{recipient_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
        - operators
      summary: Return information about a specific recipeint.
      operationId: retrieve_domain_user_team_recipient
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/RecipientID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the recipient.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RecipientWithFilterAndVerificationInfo'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrRecipeintNotFound'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Delete a specific recipeint
      operationId: hard_delete_domain_team_recipient
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/RecipientID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/recipients/{recipient_id}/verifications':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all verifications in a specific recipients
      operationId: list_domain_user_team_recipient_verifications
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/RecipientID'
      description: |
        Some description
      responses:
        '200':
          description: A list of verifications.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/RecipientVerification'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrRecipeintNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new verification
      operationId: create_domain_user_team_recipient_verification
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/RecipientID'
      description: |
        Some description
      requestBody:
        description: empty body
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecipientVerification'
      responses:
        '201':
          description: Successfuly create verification
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RecipientVerification'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_recipient_verification
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                recipient_id: '$response.path#/team_id'
                verification_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `verification_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/recipeints/{recipient_id}/verifications/{verification_id}`.
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrRecipeintNotFound'
        '423':
          $ref: '#/components/responses/Locked'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/recipients/{recipient_id}/verifications/{verification_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific recipeint.
      operationId: retrieve_domain_user_team_recipient_verification
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/RecipientID'
        - $ref: '#/components/parameters/RecipientVerificationID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the verification.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/RecipientVerification'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: >-
            #/components/responses/DomainOrUserOrTeamOrRecipeintOrVerificationNotFound
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: >-
        Return a list of all inboxes in a specific team for logined user is
        member of them
      operationId: list_domain_user_team_inboxes
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      responses:
        '200':
          description: A list of teams.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Inbox'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new inbox
      operationId: create_domain_user_team_inbox
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
      description: |
        Some description
      requestBody:
        description: inbox name and rule params
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestInbox'
      responses:
        '201':
          description: Successfuly create inbox
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InboxWithRule'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetInboxByID:
              operationId: retrieve_domain_user_team_inbox
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                inbox_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `inbox_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '402':
          $ref: '#/components/responses/PaymentRequired'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return information about a specific inbox.
      operationId: retrieve_domain_user_team_inbox
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the inbox.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/InboxWithRule'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/DomainOrUserOrTeamOrInboxNotFound'
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Replace inbox info and rule.
      operationId: replace_domain_user_team_inbox
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: inbox name and rule params
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestInbox'
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Edit one or more fields of inbox
      operationId: update_domain_user_team_inbox
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: inbox name or rule params
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Delete a specific inbox
      operationId: hard_delete_domain_team_inbox
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/keywords':
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to updateing keywords of the inbox
      operationId: replace_domain_user_team_inbox_keywords
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: keywords for rule of the inbox
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Keywords'
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/media':
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to updateing keywords of the inbox
      operationId: replace_domain_user_team_inbox_media
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: Media ids for rule of the inbox
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/blocked_sources':
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to updateing blocked_sources of the inbox
      operationId: replace_domain_user_team_inbox_blocked_sources
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: Sources ids for blocked in rule of the inbox
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayOfIDs'
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: >-
        alias to adding a specific source to the blocked_sources in rule of the
        inbox
      operationId: create_domain_user_team_inbox_blocked_source
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: Source id for add to blocked_sources in rule of the inbox
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                source_id:
                  $ref: '#/components/schemas/ID'
              required:
                - source_id
      responses:
        '200':
          $ref: '#/components/responses/InboxHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/InvalidSourceID'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/blocked-sources/{blocked_source_id}':
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: >-
        alias to deleteing specific source from the blocked_sources in rule of
        the inbox
      operationId: hard_delete_domain_user_team_inbox_blocked_source
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/BlockedSourceID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/mentions':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all mentions in a specific inbox
      operationId: list_domain_user_team_inbox_mentions
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/Terms'
        - $ref: '#/components/parameters/NotTerms'
        - $ref: '#/components/parameters/Sources'
        - $ref: '#/components/parameters/Labels'
        - $ref: '#/components/parameters/DatetimeStart'
        - $ref: '#/components/parameters/DatetimeEnd'
      description: |
        Some description
      responses:
        '200':
          description: A list of mentions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/MentionWithChildren'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/mentions/{mention_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Get information of specific mention in the inbox
      operationId: retrieve_domain_user_team_inbox_mention
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the mention.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/MentionWithFullBodyAndChildren'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrMentionNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/mentions/{mention_ids}':
    patch:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Bulk edit one or more params from mentions
      operationId: update_domain_user_team_inbox_mentions
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionIDs'
      description: |
        Some description
      requestBody:
        description: |
          bulk change mentions params
          * marked_as_read
          * marked_as_saved
          * labels (add, remove)
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/MentionsHasBeenUpdatedSuccessfuly'
        '207':
          $ref: '#/components/responses/MultiStatus'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Remove mentions from inbox
      operationId: hard_delete_domain_user_team_inbox_mentions
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionIDs'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '207':
          $ref: '#/components/responses/MultiStatus'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/mentions/{mention_id}/labels':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all labels in a specific mention
      operationId: list_domain_user_team_inbox_mention_labels
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionID'
      description: |
        Some description
      responses:
        '200':
          description: A list of labels.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Label'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrMentionNotFound'
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to updateing labels of the mention
      operationId: replace_domain_user_team_inbox_mention_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionID'
      description: |
        Some description
      requestBody:
        description: labels ids for the mention
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayOfIDs'
      responses:
        '200':
          $ref: '#/components/responses/MentionHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrMentionNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to adding specific label to the mention
      operationId: create_domain_user_team_inbox_mention_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionID'
      description: |
        Some description
      requestBody:
        description: id of label
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ID'
      responses:
        '200':
          $ref: '#/components/responses/MentionHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/InvalidLabelID'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrMentionNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/mentions/{mention_id}/labels/{label_id}':
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: alias to deleteing specific label from the mention
      operationId: hard_delete_domain_user_team_inbox_mention_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/MentionID'
        - $ref: '#/components/parameters/LabelID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/labels':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all labels in a specific inbox
      operationId: list_domain_user_team_inboxe_labels
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      responses:
        '200':
          description: A list of labels.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Label'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new label
      operationId: create_domain_user_team_inbox_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: label information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLabel'
      responses:
        '201':
          description: Successfuly create label
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Label'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetlabelByID:
              operationId: retrieve_domain_user_team_inbox_label
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                inbox_id: '$response.path#/inbox_id'
                label_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `label_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/labels/{label_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/labels/{label_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Get information of specific label in the inbox
      operationId: retrieve_domain_user_team_inbox_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/LabelID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the label.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Label'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrLabelNotFound'
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: updateing a specific label of the inbox
      operationId: replace_domain_user_team_inbox_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/LabelID'
      description: |
        Some description
      requestBody:
        description: Update a specific label information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestLabel'
      responses:
        '200':
          $ref: '#/components/responses/LabelHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrLabelNotFound'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Remove label from inbox
      operationId: hard_delete_domain_user_team_inbox_label
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/LabelID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/filters':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all filters in a specific inbox
      operationId: list_domain_user_team_inboxe_filters
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      responses:
        '200':
          description: A list of filters.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Filter'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
    post:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Create a new filter
      operationId: create_domain_user_team_inbox_filter
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
      description: |
        Some description
      requestBody:
        description: filter information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestFilter'
      responses:
        '201':
          description: Successfuly create Filter
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Filter'
          headers:
            Location:
              $ref: '#/components/headers/Location'
          links:
            GetFilterByID:
              operationId: retrieve_domain_user_team_inbox_filter
              parameters:
                domain_id: '$response.path#/domain_id'
                user_id: '$response.path#/user_id'
                team_id: '$response.path#/team_id'
                inbox_id: '$response.path#/inbox_id'
                filter_id: '$response.body#/data/id'
              description: >
                The `id` value returned in the response can be used as the
                `filter_id` parameter in `GET
                /domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/fitlers/{filter_id}`.
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/filters/{filter_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Get information of specific filter in the inbox
      operationId: retrieve_domain_user_team_inbox_filter
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the filter.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Filter'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterNotFound'
    patch:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Edit name or order of the filter
      operationId: update_domain_user_team_inbox_filter
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      requestBody:
        description: filter name or filter order
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchRequest'
      responses:
        '200':
          $ref: '#/components/responses/FilterHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterNotFound'
        '406':
          $ref: '#/components/responses/NotAcceptable'
        '423':
          $ref: '#/components/responses/Locked'
    put:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: updateing a specific filter of the inbox
      operationId: replace_domain_user_team_inbox_filter
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      requestBody:
        description: Update a specific filter information
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RequestFilter'
      responses:
        '200':
          $ref: '#/components/responses/FilterHasBeenUpdatedSuccessfuly'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterNotFound'
        '423':
          $ref: '#/components/responses/Locked'
    delete:
      security:
        - PasswordOAuth2:
            - customer_panel_write
      tags:
        - customers
      summary: Remove filter from inbox
      operationId: hard_delete_domain_user_team_inbox_filter
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      responses:
        '204':
          $ref: '#/components/responses/NoContent'
        '403':
          $ref: '#/components/responses/AccessForbidden'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/filters/{filter_id}/recipients':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all recipients assigned to a specific filter
      operationId: list_domain_user_team_inbox_filter_recipients
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      responses:
        '200':
          description: A list of filters.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                $ref: '#/components/schemas/ListOfRecipients'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/filters/{filter_id}/recipients/{recipient_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Get information of specific recipinent assigned into a specific filter
      operationId: retrieve_domain_user_team_inbox_filter_recipient
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
        - $ref: '#/components/parameters/RecipientID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the filter.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/AnyOfRecipients'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterOrRecipientNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/filters/{filter_id}/mentions':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: >-
        Return a list of all mentions in a specific inbox after apply selected
        filter
      operationId: list_domain_user_team_inbox_filter_mentions
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      responses:
        '200':
          description: A list of mentions.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/MentionWithChildren'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrFilterNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/sources':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Return a list of all sources in the special inbox
      operationId: list_domain_user_team_inbox_source
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/MaxID'
        - $ref: '#/components/parameters/MinID'
        - $ref: '#/components/parameters/Sorts'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/Name'
        - $ref: '#/components/parameters/FilterID'
      description: |
        Some description
      responses:
        '200':
          description: List of sources in the selected inbox
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        allOf:
                          - $ref: '#/components/schemas/Lists'
                          - type: object
                            properties:
                              list:
                                type: array
                                items:
                                  $ref: '#/components/schemas/Source'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxNotFound'
  '/domains/{domain_id}/users/{user_id}/teams/{team_id}/inboxes/{inbox_id}/sources/{source_id}':
    get:
      security:
        - PasswordOAuth2:
            - customer_panel_read
      tags:
        - customers
      summary: Get information of specific source in the inbox
      operationId: retrieve_domain_user_team_inbox_source
      parameters:
        - $ref: '#/components/parameters/Language'
        - $ref: '#/components/parameters/Version'
        - $ref: '#/components/parameters/DomainID'
        - $ref: '#/components/parameters/UserID'
        - $ref: '#/components/parameters/TeamID'
        - $ref: '#/components/parameters/InboxID'
        - $ref: '#/components/parameters/SourceID'
      description: |
        Some description
      responses:
        '200':
          description: Information of the source.
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/Response'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Source'
        '403':
          $ref: '#/components/responses/AccessForbidden'
        '404':
          $ref: '#/components/responses/TeamOrInboxOrSourceNotFound'
security:
  - UserOAuth2:
      - customer_panel_read
      - self
components:
  securitySchemes:
    PasswordOAuth2:
      type: oauth2
      description: This API uses OAuth 2 with the password grant flow.
      flows:
        password:
          tokenUrl: 'https://api.pandora.com/oauth2/token'
          refreshUrl: 'https://api.pandora.com/oauth2/refresh'
          scopes:
            customer_panel_read: read in customer panel
            customer_panel_write: write in customer panel
            operator_panel_read: read in operator panel
            operator_panel_write: write in operator panel
            self: self
    ServerOAuth2:
      type: oauth2
      description: This API uses OAuth 2 with the password grant clientCredentials.
      flows:
        clientCredentials:
          tokenUrl: 'https://api.pandora.com/oauth2/token/'
          scopes:
            clients_read: read info by client
            clients_write: write info by client
            links_oauth: get oauth link
  parameters:
    Language:
      in: header
      name: Accept-Language
      schema:
        type: string
      example: fa-IR
    Version:
      in: header
      name: Accept-Version
      schema:
        type: string
      example: 1.0.1
      description: Api version in semantic format
    MinID:
      in: query
      name: min_id
      description: Minimum ID for fetching items
      schema:
        allOf:
          - $ref: '#/components/schemas/ID'
        minimum: 0
    MaxID:
      in: query
      name: max_id
      description: Maximum ID for fetching items
      schema:
        allOf:
          - $ref: '#/components/schemas/ID'
        minimum: 1
    Sorts:
      in: query
      name: sorts
      description: 'Order of items,usage [field_name1:[desc/asc], field_name2:[desc/asc]]'
      schema:
        $ref: '#/components/schemas/ArrayOfStrings'
    Offset:
      in: query
      name: Offset
      description: Start index for fetching items to return
      schema:
        type: integer
        format: int32
        minimum: 0
        default: 0
    Limit:
      in: query
      name: limit
      description: Maximum number of items to return.
      schema:
        type: integer
        format: int32
        minimum: 10
        maximum: 500
        default: 10
    Name:
      in: query
      name: name
      description: Part of name
      schema:
        type: string
    Email:
      in: query
      name: email
      description: Part of email
      schema:
        type: string
    Role:
      in: query
      name: role
      description: role
      schema:
        $ref: '#/components/schemas/Role'
    Status:
      in: query
      name: status
      description: status
      schema:
        $ref: '#/components/schemas/Status'
    Mobile:
      in: query
      name: mobile
      description: Part of mobile number
      schema:
        type: string
    Terms:
      in: query
      name: terms
      description: Required keywords for filter mentions
      schema:
        $ref: '#/components/schemas/ArrayOfStrings'
    NotTerms:
      in: query
      name: not_terms
      description: Excluded keywords for filter mentions
      schema:
        $ref: '#/components/schemas/ArrayOfStrings'
    DatetimeStart:
      in: query
      name: datetime_start
      description: Start datetime for filter mentions
      schema:
        $ref: '#/components/schemas/Datetime'
    DatetimeEnd:
      in: query
      name: datetime_end
      description: End datetime for filter mentions
      schema:
        $ref: '#/components/schemas/Datetime'
    Sources:
      in: query
      name: sources
      description: Sources IDs for filter mentions
      schema:
        $ref: '#/components/schemas/ArrayOfIDs'
    Labels:
      in: query
      name: labels
      description: Labels IDs for filter mentions
      schema:
        $ref: '#/components/schemas/ArrayOfIDs'
    UserHandle:
      in: query
      name: handle
      description: Email or Mobile
      schema:
        $ref: '#/components/schemas/UserHandle'
    MemberInvitationToken:
      in: query
      name: token
      description: Token
      schema:
        $ref: '#/components/schemas/Token'
    MarkedAsRead:
      in: query
      name: marked_as_read
      description: Read status for filter mentions
      schema:
        type: boolean
    DomainID:
      in: path
      name: domain_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The domain ID
    RoleID:
      in: path
      name: role_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The Role ID
    ClientID:
      in: path
      name: client_id
      required: true
      schema:
        type: string
      description: The client ID
    OperatorID:
      in: path
      name: operator_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The operator ID
    PlanID:
      in: path
      name: plan_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The plan ID
    UserID:
      in: path
      name: user_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The user ID
    VerificationID:
      in: path
      name: verification_id
      required: true
      schema:
        $ref: '#/components/schemas/TokenID'
      description: The verification ID
    AnonymousUserID:
      in: path
      name: anonymous_user_id
      required: true
      schema:
        $ref: '#/components/schemas/TokenID'
      description: The anonymous user ID
    DeviceID:
      in: path
      name: device_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The device ID
    TeamID:
      in: path
      name: team_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The team ID
    MemberID:
      in: path
      name: member_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The member ID
    InvitationID:
      in: path
      name: invitation_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The invitation ID
    MentionIDs:
      in: path
      name: mention_ids
      required: true
      schema:
        type: array
        items:
          $ref: '#/components/schemas/ID'
      description: List of Mentions IDs
    BlockedSourceID:
      in: path
      name: blocked_source_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The blocked source ID
    SourceID:
      in: path
      name: source_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The source ID
    InboxID:
      in: path
      name: inbox_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The inbox ID
    LabelID:
      in: path
      name: label_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The label ID
    FilterID:
      in: path
      name: filter_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The filter ID
    RecipientID:
      in: path
      name: recipient_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The recipient ID
    RecipientVerificationID:
      in: path
      name: verification_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The verification ID
    MediumID:
      in: path
      name: medium_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The medium ID
    PlatformID:
      in: path
      name: platform_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The platform ID
    MentionID:
      in: path
      name: mention_id
      required: true
      schema:
        $ref: '#/components/schemas/ID'
      description: The mention ID
  headers:
    Location:
      description: The full URI of the created resource
      schema:
        type: string
        format: uri
      required: true
  responses:
    NoContent:
      description: Content has been removed successfuly
    MultiStatus:
      description: Multi status
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BulkResponse'
    PaymentRequired:
      description: Payment Required (Plan limitation)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    AccessForbidden:
      description: Access Forbidden
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    BadRequest:
      description: Bad Request
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Error'
              - type: object
                properties:
                  data:
                    type: object
                    properties:
                      user_messages:
                        $ref: '#/components/schemas/ArrayOfServerMessages'
                      technical_messages:
                        $ref: '#/components/schemas/ArrayOfServerMessages'
    Locked:
      description: Locked
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LockResponse'
    Conflict:
      description: Conflict (Item with this information exists)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidSourceID:
      description: Bad Request (Invalid Source ID)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidLabelID:
      description: Bad Request (Invalid Label ID)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotAcceptable:
      description: Not Acceptable
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    NotFound:
      description: Not Found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainNotFound:
      description: Domain not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrVerificationNotFound:
      description: Domain Or Verification not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    OperatorNotFound:
      description: Operator not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    PlanNotFound:
      description: Plan not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UserNotFound:
      description: User not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    ClientNotFound:
      description: Client not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrAnonymousUserNotFound:
      description: Domain or AnonymousUser not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrRoleNotFound:
      description: Domain or Role not found(Role in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrClientNotFound:
      description: Domain or Client not found(Client in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrClientOrUserNotFound:
      description: >-
        Domain or Client or User not found(Client or User in the current domain
        not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrClientOrOperatorNotFound:
      description: >-
        Domain or Client or Operator not found(Client or Operator in the current
        domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrOperatorNotFound:
      description: Domain or Operator not found(Operator in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrPlanNotFound:
      description: Domain or Plan not found(Plan in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserNotFound:
      description: Domain or User not found(User in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrTeamNotFound:
      description: Domain or Team not found(Team in the current domain not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrDeviceNotFound:
      description: >-
        Domain or User or Device not found(Device in the current domain for the
        selected user not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrTeamOrInvitationNotFound:
      description: >-
        Domain or Team or Invitation not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamNotFound:
      description: >-
        Domain or User or Team not found(Team in the current domain for the
        selected user not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamOrMemberNotFound:
      description: >-
        Domain or User or Team or Member not found(Member of team in the current
        domain for the selected user not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamOrMemberOrInvitationNotFound:
      description: Domain or User or Team or Member or Invitation not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamOrRecipeintNotFound:
      description: >-
        Domain or User or Team or Recipient not found(Recipient of team in the
        current domain for the selected user not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamOrRecipeintOrVerificationNotFound:
      description: Domain or User or Team or Recipient or Verification not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    DomainOrUserOrTeamOrInboxNotFound:
      description: >-
        Domain or User or Team or Inbox not found(Inbox of team in the current
        domain for the selected user not found)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamNotFound:
      description: Team not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxNotFound:
      description: Team or Inbox not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrBlockedSourceIDNotFound:
      description: Team or Inbox or Blocked Source ID not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrSourceNotFound:
      description: Team or Inbox or Source not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrLabelNotFound:
      description: Team or Inbox or Label not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrFilterNotFound:
      description: Team or Inbox or Filter not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrFilterOrRecipientNotFound:
      description: Team or Inbox or Filter or Recipient not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrMentionNotFound:
      description: Team or Inbox or Mention not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    TeamOrInboxOrMentionOrLabelNotFound:
      description: Team or Inbox or Mention or label not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MediumNotFound:
      description: Medium not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    MediumOrPlatformNotFound:
      description: Medium or Platform not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    LabelHasBeenUpdatedSuccessfuly:
      description: Label has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Label'
    FilterHasBeenUpdatedSuccessfuly:
      description: Filter has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Filter'
    MentionHasBeenUpdatedSuccessfuly:
      description: Mention has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Mention'
    MentionsHasBeenUpdatedSuccessfuly:
      description: Mentions has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/Lists'
                      - type: object
                        properties:
                          list:
                            type: array
                            items:
                              $ref: '#/components/schemas/Mention'
    DomainHasBeenUpdatedSuccessfuly:
      description: Domain has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Domain'
    OperatorHasBeenUpdatedSuccessfuly:
      description: Operator has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Operator'
    UserTeamHasBeenUpdatedSuccessfuly:
      description: Team information for the selected user has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/UserTeam'
    TeamPlanHasBeenUpdatedSuccessfuly:
      description: Team plan has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/CurrentPlan'
    PlanHasBeenUpdatedSuccessfuly:
      description: Plan has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Plan'
    RoleHasBeenUpdatedSuccessfuly:
      description: Role has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Role'
    UserHasBeenUpdatedSuccessfuly:
      description: User has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/User'
    InboxHasBeenUpdatedSuccessfuly:
      description: Inbox has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/InboxWithRule'
    MemberHasBeenUpdatedSuccessfuly:
      description: Member has been updated successfuly
      content:
        application/json:
          schema:
            allOf:
              - $ref: '#/components/schemas/Response'
              - type: object
                properties:
                  data:
                    $ref: '#/components/schemas/Member'
  schemas:
    Response:
      type: object
      properties:
        status:
          type: string
          enum:
            - ok
            - fail
        message:
          type: string
        data:
          type: object
      required:
        - status
        - message
        - data
    Error:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            status:
              type: string
              enum:
                - fail
    Lists:
      allOf:
        - type: object
          properties:
            list:
              type: array
              items:
                type: object
    LockResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              $ref: '#/components/schemas/LockItemResponse'
    BulkResponse:
      allOf:
        - $ref: '#/components/schemas/Response'
        - type: object
          properties:
            data:
              type: object
              properties:
                result:
                  type: array
                  items:
                    $ref: '#/components/schemas/BulkItemResponse'
    BulkItemResponse:
      type: object
      properties:
        code:
          description: http status code ...
          type: integer
          format: int32
          example: 200
        message:
          type: string
        data:
          type: object
      required:
        - code
        - message
        - data
    LockItemResponse:
      type: object
      properties:
        unlocked_time:
          $ref: '#/components/schemas/RemainingTime'
    ID:
      type: integer
      format: int64
      minimum: 1
      readOnly: true
    RequestID:
      allOf:
        - $ref: '#/components/schemas/ID'
      readOnly: false
      writeOnly: true
    TokenID:
      type: string
      minimum: 1
      readOnly: true
    ArrayOfIDs:
      type: array
      items:
        $ref: '#/components/schemas/ID'
    ArrayOfStrings:
      type: array
      items:
        type: string
    Datetime:
      type: string
      format: date-time
    MIME:
      type: string
    URI:
      type: string
      format: uri
    ConfirmationStatus:
      type: string
      enum:
        - pending
        - confirmed
    ArrayOfServerMessages:
      type: array
      items:
        type: object
        properties:
          path:
            type: string
          message:
            type: string
        required:
          - path
          - message
    InvitationStatus:
      type: string
      enum:
        - pending
        - accepted
    Status:
      type: string
      enum:
        - active
        - inactive
    TimeInterval:
      type: integer
      format: int64
      minimum: 1
      description: Time interval based on seconds
    RemainingTime:
      type: integer
      format: int64
      minimum: 1
      description: Remaining seconds till expiring
      readOnly: true
    PatchRequest:
      type: array
      items:
        type: object
        properties:
          op:
            type: string
            enum:
              - set
              - inc
              - dec
              - add
              - remove
              - reset
          path:
            type: string
          value:
            $ref: '#/components/schemas/AnyValue'
        required:
          - op
          - path
    ImageMeta:
      type: object
      properties:
        width:
          type: integer
          format: int32
        height:
          type: integer
          format: int32
        mime:
          $ref: '#/components/schemas/MIME'
    AuthClientType:
      type: string
      enum:
        - server
        - client
        - user
        - operator
    ResourceOwnerType:
      type: string
      enum:
        - customer
        - operator
        - client
    Password:
      type: string
      minimum: 6
      writeOnly: true
    Token:
      type: string
    Mobile:
      type: string
    Email:
      type: string
    TimeZone:
      type: string
      enum:
        - Asia/Tehran
    Domain:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
      readOnly: true
    Client:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        client_id:
          type: string
        resource_owner_type:
          $ref: '#/components/schemas/ResourceOwnerType'
        domain:
          $ref: '#/components/schemas/Domain'
    UserPublicInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        confirmation_status:
          allOf:
            - $ref: '#/components/schemas/ConfirmationStatus'
          readOnly: true
      required:
        - id
        - name
        - confirmation_status
      readOnly: true
    Operator:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        email:
          $ref: '#/components/schemas/Email'
        marked_as_banned:
          type: boolean
          readOnly: true
        password:
          $ref: '#/components/schemas/Password'
      required:
        - id
        - name
        - email
        - marked_as_banned
        - password
    OperatorWithDomain:
      allOf:
        - $ref: '#/components/schemas/Operator'
        - type: object
          properties:
            domain:
              $ref: '#/components/schemas/Domain'
          required:
            - domain
    User:
      allOf:
        - $ref: '#/components/schemas/UserPublicInfo'
        - type: object
          properties:
            email:
              $ref: '#/components/schemas/Email'
            mobile:
              $ref: '#/components/schemas/Mobile'
            marked_as_banned:
              type: boolean
              readOnly: true
            password:
              $ref: '#/components/schemas/Password'
          required:
            - email
            - marked_as_banned
            - password

    UserWithDomain:
      allOf:
        - $ref: '#/components/schemas/User'
        - type: object
          properties:
            domain:
              $ref: '#/components/schemas/Domain'
          required:
            - domain
    Storage:
      type: object
      properties:
        shared:
          $ref: '#/components/schemas/AnyValue'
        dedicated:
          $ref: '#/components/schemas/AnyValue'
      required:
        - shared
        - dedicated
    AnyValue:
      description: 'Can be any value - string, number, boolean, array or object.'
      type: object
      additionalProperties:
        type: object
    SelfPublicInformation:
      type: object
      properties:
        timezone:
          $ref: '#/components/schemas/TimeZone'
        auth_client_type:
          $ref: '#/components/schemas/AuthClientType'
      required:
        - timezone
        - type
    UserWithStorage:
      allOf:
        - $ref: '#/components/schemas/UserWithDomain'
        - $ref: '#/components/schemas/SelfPublicInformation'
        - type: object
          properties:
            storage:
              $ref: '#/components/schemas/Storage'
    OperatorWithStorage:
      allOf:
        - $ref: '#/components/schemas/OperatorWithDomain'
        - $ref: '#/components/schemas/SelfPublicInformation'
        - type: object
          properties:
            storage:
              $ref: '#/components/schemas/Storage'
    Self:
      oneOf:
        - $ref: '#/components/schemas/UserWithStorage'
        - $ref: '#/components/schemas/OperatorWithStorage'
        - allOf:
          - $ref: '#/components/schemas/Client'
          - $ref: '#/components/schemas/SelfPublicInformation'
      discriminator:
        propertyName: type
    Device:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        push_token:
          $ref: '#/components/schemas/Token'
      required:
        - id
        - push_token
    NotificationTestMessage:
      type: object
      properties:
        message:
          type: string
      required:
        - message
    TeamPublicInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          readOnly: true
      required:
        - id
        - name
      readOnly: true
    Team:
      allOf:
        - $ref: '#/components/schemas/TeamPublicInfo'
        - type: object
          properties:
            name:
              type: string
              readOnly: false
            confirmation_status:
              allOf:
                - $ref: '#/components/schemas/ConfirmationStatus'
              readOnly: true
            plan:
              $ref: '#/components/schemas/CurrentPlan'
            marked_as_banned:
              type: boolean
              readOnly: true
          required:
            - plan
            - marked_as_banned
    TeamWithOwner:
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            owner:
              allOf:
                - $ref: '#/components/schemas/User'
              readOnly: true
    TeamWithDomain:
      allOf:
        - $ref: '#/components/schemas/TeamWithOwner'
        - type: object
          properties:
            domain:
              $ref: '#/components/schemas/Domain'
          required:
            - domain
    Endpoint:
      type: string
      pattern: >-
        [^api/v1/domian/<int:domain_id>/users/<int:user_id>/teams/<int:team_id>/.*$
        | ALL]
    GlobalMethod:
      type: string
      enum:
        - GET
        - POST
        - PUT
        - PATCH
        - DELETE
    RequestMethod:
      allOf:
        - $ref: '#/components/schemas/GlobalMethod'
        - type: string
          enum:
            - ALL
      writeOnly: true
      readOnly: false
    ResponseMethod:
      allOf:
        - $ref: '#/components/schemas/GlobalMethod'
        - type: string
          enum:
            - HEAD
            - OPTION
      readOnly: true
      writeOnly: false
    Accessibility:
      type: object
      properties:
        operation_id:
          type: string
          readOnly: true
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        method:
          $ref: '#/components/schemas/ResponseMethod'
      required:
        - operation_id
        - endpoint
        - method
    RequestAccessibility:
      type: object
      properties:
        endpoint:
          $ref: '#/components/schemas/Endpoint'
        method:
          $ref: '#/components/schemas/RequestMethod'
      required:
        - endpoint
        - method
    AnonymousUserPatchRequest:
      type: array
      items:
        anyOf:
          - type: object
            properties:
              op:
                type: string
                enum:
                  - set
              path:
                type: string
                enum:
                  - user.name
              value:
                type: string
            required:
              - op
              - path
              - value
          - type: object
            properties:
              op:
                type: string
                enum:
                  - set
              path:
                type: string
                enum:
                  - user.password
              value:
                $ref: '#/components/schemas/Password'
            required:
              - op
              - path
              - value
    RolePatchRequest:
      type: array
      items:
        type: object
        properties:
          op:
            type: string
            enum:
              - set
              - add
              - remove
          path:
            type: string
            enum:
              - accessibilities
          value:
            $ref: '#/components/schemas/RequestAccessibility'
        required:
          - op
          - path
          - value
    Role:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          readOnly: true
          type: string
          enum:
            - owner
            - admin
            - regular
            - guest
      required:
        - id
        - name
    RoleWithAccessibility:
      allOf:
        - $ref: '#/components/schemas/Role'
        - type: object
          properties:
            accessibilities:
              type: array
              items:
                $ref: '#/components/schemas/Accessibility'
          required:
            - accessibilities
    MemberProperties:
      type: object
      properties:
        role:
          allOf:
            - $ref: '#/components/schemas/Role'
          readOnly: true
        role_id:
          $ref: '#/components/schemas/RequestID'
        invitation_status:
          $ref: '#/components/schemas/InvitationStatus'
        inboxes:
          type: array
          items:
            $ref: '#/components/schemas/Inbox'
          readOnly: true
        inbox_ids:
          allOf:
            - $ref: '#/components/schemas/ArrayOfIDs'
          writeOnly: true
    UserTeam:
      allOf:
        - $ref: '#/components/schemas/Team'
        - type: object
          properties:
            self:
              $ref: '#/components/schemas/MemberProperties'
    Member:
      allOf:
        - type: object
          properties:
            user:
              allOf:
                - $ref: '#/components/schemas/User'
              readOnly: true
            user_id:
              $ref: '#/components/schemas/RequestID'
        - $ref: '#/components/schemas/MemberProperties'
    UserHandlePatterns:
      oneOf:
        - $ref: '#/components/schemas/Mobile'
        - $ref: '#/components/schemas/Email'
    UserHandle:
      type: object
      properties:
        handle:
          $ref: '#/components/schemas/UserHandlePatterns'
      required:
        - handle
    MemberByHandler:
      allOf:
        - $ref: '#/components/schemas/UserHandle'
        - $ref: '#/components/schemas/MemberProperties'
    Invitation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        remaining:
          $ref: '#/components/schemas/RemainingTime'
        domain:
          allOf:
            - $ref: '#/components/schemas/Domain'
          readOnly: true
      required:
        - id
        - remaining
        - domain
    MemberInvitation:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/Invitation'
          readOnly: true
        - type: object
          properties:
            invited_by:
              allOf:
                - $ref: '#/components/schemas/UserPublicInfo'
              readOnly: true
            team:
              allOf:
                - $ref: '#/components/schemas/TeamPublicInfo'
              readOnly: true
            user:
              allOf:
                - $ref: '#/components/schemas/UserPublicInfo'
              readOnly: true
          required:
            - invited_by
            - team
            - user
    ConfirmOrRejectInvitation:
      type: object
      properties:
        invitation:
          type: object
          required:
            - id
            - token
          properties:
            id:
              $ref: '#/components/schemas/RequestID'
            token:
              allOf:
                - $ref: '#/components/schemas/Token'
              writeOnly: true

    MemberInvitationWIthUserMeta:
      allOf:
        - allOf:
            - $ref: '#/components/schemas/MemberInvitation'
          readOnly: true
        - type: object
          properties:
            user:
              allOf:
                - $ref: '#/components/schemas/UserPublicInfo'
                - type: object
                  properties:
                    meta:
                      type: object
                      properties:
                        anonymous_user:
                          $ref: '#/components/schemas/AnonymousUser'
              readOnly: true
    AnonymousUser:
      type: object
      readOnly: true
      properties:
        id:
          $ref: '#/components/schemas/TokenID'
        remaining:
          $ref: '#/components/schemas/RemainingTime'
        handle:
          $ref: '#/components/schemas/UserHandle'
    AnonymousUserWithUserInfo:
      allOf:
        - $ref: '#/components/schemas/AnonymousUser'
        - type: object
          readOnly: true
          properties:
            user:
              $ref: '#/components/schemas/UserPublicInfo'
    Plan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        features:
          $ref: '#/components/schemas/PlanFeatures'
        limitations:
          type: array
          items:
            $ref: '#/components/schemas/PlanLimitation'
    PlanWithDomain:
      allOf:
        - $ref: '#/components/schemas/Plan'
        - type: object
          properties:
            domain:
              $ref: '#/components/schemas/Domain'
          required:
            - domain
    CurrentPlan:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Name of the assigned plan
        remaining:
          $ref: '#/components/schemas/RemainingTime'
        features:
          $ref: '#/components/schemas/PlanFeatures'
        limitations:
          type: array
          items:
            allOf:
              - $ref: '#/components/schemas/PlanLimitation'
              - type: object
                properties:
                  value:
                    type: integer
                    format: int32
                    minimum: 0
                    readOnly: true
      readOnly: true
    AssigningPlan:
      allOf:
        - $ref: '#/components/schemas/CurrentPlan'
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/RequestID'
      readOnly: false
    PlanLimitation:
      type: object
      properties:
        name:
          type: string
          description: Name of limitation
        label:
          type: string
          description: A short word or phrase descriptive of limitation
        cap:
          type: integer
          format: int32
          minimum: 0
          description: Value of limitation
    PlanFeatures:
      type: array
      items:
        anyOf:
          - type: object
            properties:
              name:
                type: string
                enum:
                  - inbox_initialization_delay
                description: inbox_initialization_delay
              label:
                type: string
                description: A short word or phrase descriptive of feature
              value:
                $ref: '#/components/schemas/TimeInterval'
          - type: object
            properties:
              name:
                type: string
                enum:
                  - mention_longevity
                description: longevity of mentions
              label:
                type: string
                description: A short word or phrase descriptive of feature
              value:
                $ref: '#/components/schemas/TimeInterval'
    InboxWithRule:
      allOf:
        - $ref: '#/components/schemas/Inbox'
        - type: object
          properties:
            rule:
              $ref: '#/components/schemas/Rule'
    InboxBasicInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
      required:
        - id
        - name
    Inbox:
      allOf:
        - $ref: '#/components/schemas/InboxBasicInfo'
        - type: object
          properties:
            status:
              type: string
              enum:
                - initialize_pending
                - initializing
                - initialized
              readOnly: true
              writeOnly: false
            time_remaining_until_update:
              allOf:
                - $ref: '#/components/schemas/RemainingTime'
              readOnly: true
              writeOnly: false
            mentions:
              type: object
              properties:
                stats:
                  type: object
                  properties:
                    total:
                      type: integer
                      format: int32
                    locked:
                      type: integer
                      format: int32
                    unlocked:
                      type: integer
                      format: int32
              readOnly: true
              writeOnly: false
          required:
            - status
            - time_remaining_until_update
    RuleVersion:
      type: integer
      format: int32
      minimum: 1
    Rule:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        status:
          $ref: '#/components/schemas/Status'
        version:
          $ref: '#/components/schemas/RuleVersion'
        conditions:
          $ref: '#/components/schemas/RuleConditions'
    RequestInbox:
      type: object
      properties:
        name:
          type: string
        rule:
          type: object
          properties:
            status:
              $ref: '#/components/schemas/Status'
            conditions:
              type: object
              properties:
                keywords:
                  type: array
                  description: 'blah, blah, blah'
                  items:
                    $ref: '#/components/schemas/Keywords'
                media:
                  $ref: '#/components/schemas/ArrayOfIDs'
                blocked_sources:
                  $ref: '#/components/schemas/ArrayOfIDs'
              required:
                - keywords
          required:
            - status
            - conditions
      required:
        - name
        - rule
    RuleConditions:
      type: object
      properties:
        keywords:
          type: array
          description: 'blah, blah, blah'
          items:
            $ref: '#/components/schemas/Keywords'
        media:
          type: array
          description: 'blah, blah, blah'
          items:
            $ref: '#/components/schemas/Medium'
        blocked_sources:
          type: array
          description: list of blocked sources
          items:
            $ref: '#/components/schemas/SourceWithPlatformInfo'
    Keywords:
      type: object
      properties:
        main:
          type: string
          description: Main word rule will match with it
        requireds:
          type: array
          description: Words that at least one of them must exsits in the text
          items:
            type: string
        excludes:
          type: array
          description: Words not exsits each of them in the text
          items:
            type: string
      required:
        - main
    SourceWithPlatformInfo:
      allOf:
        - $ref: '#/components/schemas/Source'
        - type: object
          properties:
            platform:
              allOf:
                - $ref: '#/components/schemas/Platform'
                - type: object
                  properties:
                    medium:
                      $ref: '#/components/schemas/Medium'
    Source:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Name of the source
        image:
          type: string
          description: Image of the source
        uri:
          $ref: '#/components/schemas/URI'
        external_id:
          type: string
      required:
        - id
        - name
        - image
        - uri
        - external_id
    Platform:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Name of Platform
        label:
          type: string
          description: A short word or phrase descriptive of platform
        image:
          type: string
          description: Image of the platform
      required:
        - id
        - name
        - label
        - image
    Medium:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
          description: Name of medium
        label:
          type: string
          description: A short word or phrase descriptive of medium
        status:
          $ref: '#/components/schemas/Status'
        image:
          type: string
          description: Image of the platform
      required:
        - id
        - name
        - label
        - status
        - image
    Link:
      type: object
      properties:
        link:
          type: string
        remaining:
          $ref: '#/components/schemas/RemainingTime'
    FilterConditions:
      type: object
      properties:
        terms:
          $ref: '#/components/schemas/ArrayOfStrings'
        not_terms:
          $ref: '#/components/schemas/ArrayOfStrings'
        datetime_start:
          $ref: '#/components/schemas/Datetime'
        datetime_end:
          $ref: '#/components/schemas/Datetime'
        sources:
          type: array
          items:
            $ref: '#/components/schemas/Source'
        labels:
          type: array
          items:
            $ref: '#/components/schemas/Label'
        marked_as_read:
          type: boolean
        marked_as_saved:
          type: boolean
    RequestFilterConditions:
      allOf:
        - $ref: '#/components/schemas/FilterConditions'
        - type: object
          properties:
            sources:
              $ref: '#/components/schemas/ArrayOfIDs'
            labels:
              $ref: '#/components/schemas/ArrayOfIDs'
    RequestFilter:
      type: object
      properties:
        name:
          type: string
        conditions:
          $ref: '#/components/schemas/RequestFilterConditions'
        alert:
          $ref: '#/components/schemas/RequestAlert'
      required:
        - name
        - conditions
    FilterBasicInfo:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        is_system_generated:
          type: boolean
          readOnly: true
        alert:
          $ref: '#/components/schemas/Alert'
      required:
        - id
        - name
        - is_system_generated
    FilterBasicInfoWithInboxBasicInfo:
      allOf:
        - $ref: '#/components/schemas/FilterBasicInfo'
        - type: object
          properties:
            inbox:
              $ref: '#/components/schemas/InboxBasicInfo'
    Filter:
      allOf:
        - $ref: '#/components/schemas/FilterBasicInfo'
        - type: object
          properties:
            conditions:
              $ref: '#/components/schemas/FilterConditions'
            alert:
              $ref: '#/components/schemas/AlertWithRecipients'
          required:
            - conditions
            - alert
    Alert:
      type: object
      properties:
        is_active:
          type: boolean
      required:
        - is_active
    AlertWithRecipients:
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            recipients:
              $ref: '#/components/schemas/ListOfRecipients'
          required:
            - recipients
    RequestAlert:
      allOf:
        - $ref: '#/components/schemas/Alert'
        - type: object
          properties:
            recipients:
              $ref: '#/components/schemas/ArrayOfIDs'
    OutletTypes:
      type: string
      enum:
        - telegram
        - email
    Recipient:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        name:
          type: string
        type:
          $ref: '#/components/schemas/OutletTypes'
        status:
          type: string
          enum:
            - active
            - inactive
            - verifying
          readOnly: true
        address:
          type: string
      required:
        - id
        - name
        - type
        - status
        - address
    TelegramRecipient:
      allOf:
        - $ref: '#/components/schemas/Recipient'
        - type: object
          properties:
            token:
              type: string
              writeOnly: true
          required:
            - token
    EmailRecipient:
      $ref: '#/components/schemas/Recipient'
    EmptyBody:
      readOnly: true
    HandleVerification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/TokenID'
        remaining:
          $ref: '#/components/schemas/RemainingTime'
        code:
          allOf:
            - type: string
              minLength: 6
              maxLength: 6
          writeOnly: true
    HandleVerificationWithHandleInfo:
      allOf:
        - $ref: '#/components/schemas/HandleVerification'
        - $ref: '#/components/schemas/UserHandle'
    RecipientVerification:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        status:
          type: string
          enum:
            - fail
            - success
            - checking
            - canceled
          readOnly: true
        message:
          type: string
          readOnly: true
        created_ts:
          allOf:
            - $ref: '#/components/schemas/Datetime'
          readOnly: true
      required:
        - id
        - status
        - details
        - created_ts
    AnyOfRecipients:
      oneOf:
        - $ref: '#/components/schemas/TelegramRecipient'
        - $ref: '#/components/schemas/EmailRecipient'
    ListOfRecipients:
      type: array
      items:
        $ref: '#/components/schemas/AnyOfRecipients'
    RecipientWithFilterAndVerificationInfo:
      oneOf:
        - allOf:
            - $ref: '#/components/schemas/TelegramRecipient'
            - type: object
              properties:
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FilterBasicInfoWithInboxBasicInfo'
                verifications:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipientVerification'
              required:
                - filters
                - verifications
        - allOf:
            - $ref: '#/components/schemas/EmailRecipient'
            - type: object
              properties:
                filters:
                  type: array
                  items:
                    $ref: '#/components/schemas/FilterBasicInfoWithInboxBasicInfo'
                verifications:
                  type: array
                  items:
                    $ref: '#/components/schemas/RecipientVerification'
              required:
                - filters
                - verifications
    RequestLabel:
      type: object
      properties:
        name:
          type: string
    Label:
      allOf:
        - type: object
          properties:
            id:
              $ref: '#/components/schemas/ID'
        - $ref: '#/components/schemas/RequestLabel'
    Content:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        publish_ts:
          $ref: '#/components/schemas/Datetime'
        entrance_ts:
          $ref: '#/components/schemas/Datetime'
        mime:
          type: array
          items:
            $ref: '#/components/schemas/MIME'
        uri:
          $ref: '#/components/schemas/URI'
        raw: {}
        source:
          $ref: '#/components/schemas/SourceWithPlatformInfo'
    Highlight:
      type: object
      properties:
        keyword:
          type: string
        type:
          type: string
          enum:
            - keyword_main
            - keyword_required
        offset:
          type: integer
          format: int32
          minimum: 0
        length:
          type: integer
          format: int32
          minimum: 1
    DisplayImage:
      type: object
      properties:
        src:
          type: string
        meta:
          $ref: '#/components/schemas/ImageMeta'
    DisplayText:
      type: object
      properties:
        text:
          type: string
        highlights:
          type: array
          items:
            $ref: '#/components/schemas/Highlight'
    Mention:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/ID'
        display_materials:
          type: object
          properties:
            labels:
              type: array
              items:
                $ref: '#/components/schemas/Label'
            cover_image:
              $ref: '#/components/schemas/DisplayImage'
            headline:
              $ref: '#/components/schemas/DisplayText'
            summary:
              $ref: '#/components/schemas/DisplayText'
            attachments:
              type: array
              items:
                oneOf:
                  - $ref: '#/components/schemas/DisplayImage'
          required:
            - labels
            - cover_image
            - headline
            - summary
        marked_as_read:
          type: boolean
        marked_as_saved:
          type: boolean
        meta:
          type: object
          properties:
            rule:
              type: object
              properties:
                version:
                  $ref: '#/components/schemas/RuleVersion'
        content:
          $ref: '#/components/schemas/Content'
    ChildMention:
      $ref: '#/components/schemas/Mention'
    MentionWithFullBody:
      allOf:
        - $ref: '#/components/schemas/Mention'
        - type: object
          properties:
            display_materials:
              type: object
              properties:
                body:
                  $ref: '#/components/schemas/DisplayText'
    MentionWithFullBodyAndChildren:
      allOf:
        - $ref: '#/components/schemas/MentionWithFullBody'
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/ChildMention'
    MentionWithChildren:
      allOf:
        - $ref: '#/components/schemas/Mention'
        - type: object
          properties:
            children:
              type: array
              items:
                $ref: '#/components/schemas/ChildMention'
